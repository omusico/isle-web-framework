<?php
if(!defined('DOKU_INC')) define('DOKU_INC',fullpath(dirname(__FILE__).'/../../../').'/');

@include_once(DOKU_INC . 'inc/plugincontroller.class.php');

class preload_plugin_siteexport {

	function __register_template() {
	
		global $conf;
	
		if ( !empty($_REQUEST['q']) ) {

			require_once( DOKU_INC . 'inc/JSON.php');
			$json = new JSON();
			$tempREQUEST = (array)$json->dec(stripslashes($_REQUEST['q']));

		} else if ( !empty( $_REQUEST['template'] ) ) {
			$tempREQUEST = $_REQUEST;
		} else if ( preg_match("/(js|css)\.php$/", $_SERVER['SCRIPT_NAME']) && isset($_SERVER['HTTP_REFERER']) ) {
			// this is a css or script, nothing before matched and we have a referrer.
			// lets asume we came from the dokuwiki page.

			// Parse the Referrer URL
			$url = parse_url($_SERVER['HTTP_REFERER']);
			parse_str($url['query'], $tempREQUEST);
		} else {
			return;
		}

		// define Template baseURL
		if ( empty($tempREQUEST['template']) ) { return; }
		$tplDir = DOKU_INC.'lib/tpl/'.$tempREQUEST['template'].'/';

		if ( !file_exists($tplDir) ) { return; }
		
		// Set hint for Dokuwiki_Started event
		if (!defined('SITEEXPORT_TPL'))		define('SITEEXPORT_TPL', $tempREQUEST['template']);

		// define baseURL
		// This should be DEPRECATED - as it is in init.php which suggest tpl_basedir and tpl_incdir
		/* **************************************************************************************** */
		if(!defined('DOKU_REL')) define('DOKU_REL',getBaseURL(false));
		if(!defined('DOKU_URL')) define('DOKU_URL',getBaseURL(true));
		if(!defined('DOKU_BASE')){
			if( isset($conf['canonical']) ){
				define('DOKU_BASE',DOKU_URL);
			}else{
				define('DOKU_BASE',DOKU_REL);
			}
		}

		// This should be DEPRECATED - as it is in init.php which suggest tpl_basedir and tpl_incdir
		if (!defined('DOKU_TPL'))			define('DOKU_TPL', (empty($tempREQUEST['base']) ? DOKU_BASE : $tempREQUEST['base']) . 'lib/tpl/'.$tempREQUEST['template'].'/');
		if (!defined('DOKU_TPLINC'))		define('DOKU_TPLINC', $tplDir);
		/* **************************************************************************************** */
	}

	function __temporary_disable_plugins() {

		// Check for siteexport - otherwise this does not matter.
		if ( empty($_REQUEST['do']) || $_REQUEST['do'] != 'siteexport' ) {
			return;
		}

		// check for css and js  ... only disable in that case.
		if ( !preg_match("/(js|css)\.php$/", $_SERVER['SCRIPT_NAME']) ) {
			return;
		}

		//		print "removing plugins ";
		$_GET['purge'] = 'purge'; //activate purging
		$_POST['purge'] = 'purge'; //activate purging
		$_REQUEST['purge'] = 'purge'; //activate purging
		
		$_SERVER['HTTP_HOST'] = 'siteexport.js'; // fake everything in here
		
		require_once(DOKU_INC.'inc/plugincontroller.class.php'); // Have to get the pluginutils already
		require_once(DOKU_INC.'inc/pluginutils.php'); // Have to get the pluginutils already
		$this->__disablePlugins();
	}

	function __disablePlugins() {
		global $plugin_controller_class, $plugin_controller;
		$plugin_controller_class = 'preload_plugin_siteexport_controller';	
	}

	function __create_preload_function() {

		$PRELOADFILE = DOKU_INC.'inc/preload.php';
		$CURRENTFILE = 'DOKU_INC' . " . 'lib/plugins/siteexport/preload.php'";
		$CONTENT = <<<OUTPUT
/* SITE EXPORT *********************************************************** */
	if ( file_exists($CURRENTFILE) ) {
		include_once($CURRENTFILE);
		\$siteexport_preload = new preload_plugin_siteexport();
		\$siteexport_preload->__register_template();
		\$siteexport_preload->__temporary_disable_plugins();
		unset(\$siteexport_preload);
	}
/* SITE EXPORT END *********************************************************** */

OUTPUT;

		if ( file_exists($PRELOADFILE) ) {

			if ( ! is_readable($PRELOADFILE) ) {
				msg("Preload File locked. It exists, but it can't be read.", -1);
				return false;
			}

			if ( !is_writeable($PRELOADFILE) ) {
				msg("Preload File locked. It exists and is readable, but it can't be written.", -1);
				return false;
			}

			$fileContent = file($PRELOADFILE);
			if ( !strstr(implode("", $fileContent), $CONTENT) ) {

				$fp = fopen($PRELOADFILE, "a");
				fputs($fp, "\n".$CONTENT);
				fclose($fp);
			}

			return true;

		} else if ( is_writeable(DOKU_INC . 'inc/') ) {

			$fp = fopen($PRELOADFILE,"w");
			fputs($fp, "<?php\n/*\n * Dokuwiki Preload File\n * Auto-generated by Site Export plugin \n * Date: ".date('Y-m-d H:s:i')."\n */\n");
			fputs($fp, $CONTENT);
			fputs($fp, "// end auto-generated content\n\n");
			fclose($fp);

			return true;
		}

		msg("Could not create/modify preload.php. Please check the write permissions for your DokuWiki/inc directory.", -1);
		return false;
	}

}

// return a custom plugin list
class preload_plugin_siteexport_controller extends Doku_Plugin_Controller {

	/**
	 * Setup disabling
	 */
	public function __construct() {
		parent::__construct();
		
		$disabledPlugins = array();
		
		// support of old syntax
		if ( is_array($_REQUEST['diPlu']) ) {
			$disabledPlugins = $_REQUEST['diPlu'];
		}

		if ( !empty($_REQUEST['diInv']) ) {
			// Invert disabled plugins!
			$disabledPlugins = array_diff(array_keys($this->tmp_plugins), $_REQUEST['diPlu']);
		}
		
		// if this is defined, it overrides the settings made above. obviously.
		$disabledPlugins = empty($_REQUEST['disableplugin']) ? $disabledPlugins : $_REQUEST['disableplugin'];

		foreach( $disabledPlugins as $plugin ) {
			$this->disable($plugin);
		}
	}

   /**
    * Disable the plugin
    *
    * @param string $plugin name of plugin
    * @return bool; true allways.
    */
   public function disable($plugin) {
	   $this->tmp_plugins[$plugin] = 0;
	   return true;
   }
}


?>